generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  UNDISCLOSED @map("undisclosed")
  MALE        @map("male")
  FEMALE      @map("female")

  @@map("gender_enum")
}

enum UserRole {
  CUSTOMER @map("customer")
  ADMIN @map("admin")
  STAFF @map("staff")
  @@map("user_role_enum")
}

enum ProductCategory {
  SKINCARE   @map("skincare")
  MAKEUP     @map("makeup")
  FRAGRANCE  @map("fragrance")
  HAIRCARE   @map("haircare")
  BODY_BATH  @map("body-bath")

  @@map("product_category_enum")
}

enum OrderStatus {
  DRAFT            @map("draft")
  AWAITING_PAYMENT @map("awaiting_payment")
  PAID             @map("paid")
  PROCESSING       @map("processing")
  SHIPPED          @map("shipped")
  DELIVERED        @map("delivered")
  CANCELLED        @map("cancelled")
  RETURNED         @map("returned")

  @@map("order_status_enum")
}

enum PaymentMethod {
  GATEWAY @map("gateway")
  COD     @map("cod")

  @@map("payment_method_enum")
}

enum PaymentStatus {
  PENDING  @map("pending")
  PAID     @map("paid")
  FAILED   @map("failed")
  REFUNDED @map("refunded")

  @@map("payment_status_enum")
}

enum ShippingMethod {
  STANDARD @map("standard")
  EXPRESS  @map("express")

  @@map("shipping_method_enum")
}

enum CouponType {
  PERCENT       @map("percent")
  AMOUNT        @map("amount")
  FREE_SHIPPING @map("free_shipping")

  @@map("coupon_type_enum")
}

enum ReviewStatus {
  PENDING  @map("pending")
  APPROVED @map("approved")
  REJECTED @map("rejected")

  @@map("review_status_enum")
}

enum MagazineCategory {
  GUIDE     @map("guide")
  TUTORIAL  @map("tutorial")
  TRENDS    @map("trends")
  LIFESTYLE @map("lifestyle")
  GENERAL   @map("general")

  @@map("magazine_category_enum")
}

enum CustomerTier {
  STANDARD @map("standard")
  VIP      @map("vip")

  @@map("customer_tier_enum")
}

enum CartStatus {
  ACTIVE    @map("active")
  CONVERTED @map("converted")
  ABANDONED @map("abandoned")

  @@map("cart_status_enum")
}

enum OtpPurpose {
  LOGIN  @map("login")
  VERIFY @map("verify")
  RESET  @map("reset")

  @@map("otp_purpose_enum")
}

model User {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phone            String        @unique @db.VarChar(20)
  email            String?       @unique @db.Citext
  firstName        String?       @map("first_name") @db.VarChar(100)
  lastName         String?       @map("last_name")  @db.VarChar(100)
  birthDate        DateTime?     @map("birth_date") @db.Date
  gender           Gender        @default(UNDISCLOSED)
  customerTier     CustomerTier  @map("customer_tier") @default(STANDARD)
  phoneVerifiedAt  DateTime?     @map("phone_verified_at") @db.Timestamptz
  createdAt        DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  
  role UserRole @default(CUSTOMER) @map("role")
  notificationPrefs UserNotificationPrefs?
  addresses         UserAddress[]
  carts             Cart[]
  orders            Order[]
  productReviews    ProductReview[]
  couponRedemptions CouponRedemption[]

  @@map("users")
}

model UserNotificationPrefs {
  userId       String   @id @db.Uuid
  orderUpdates Boolean  @map("order_updates") @default(true)
  promotions   Boolean  @default(true)
  newProducts  Boolean  @map("new_products") @default(true)
  marketing    Boolean  @default(false)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notification_prefs")
}

model OtpCode {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phone        String    @db.VarChar(20)
  purpose      OtpPurpose
  code         String    @db.VarChar(10)
  attempts     Int       @default(0) @db.SmallInt
  maxAttempts  Int       @map("max_attempts") @default(5) @db.SmallInt
  expiresAt    DateTime  @map("expires_at") @db.Timestamptz
  consumedAt   DateTime? @map("consumed_at") @db.Timestamptz
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz

  @@unique([phone, purpose, code])
  @@map("otp_codes")
}

model Brand {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @unique @db.Text
  slug      String    @unique @db.Text
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  products Product[]

  @@map("brands")
}

model ColorTheme {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @unique @db.Text
  slug      String    @unique @db.Text
  hexCode   String?   @map("hex_code") @db.Char(7)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  products Product[]

  @@map("color_themes")
}

model Product {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  brandId          String           @map("brand_id") @db.Uuid
  colorThemeId     String?          @map("color_theme_id") @db.Uuid
  collectionId     String?          @map("collection_id") @db.Uuid
  category         ProductCategory
  title            String           @db.Text
  subtitle         String?          @db.Text
  slug             String           @unique @db.Text
  description      String?          @db.Text
  ingredients      String?          @db.Text
  howToUse         String?          @map("how_to_use") @db.Text
  price            Int
  compareAtPrice   Int?             @map("compare_at_price")
  currencyCode     String           @map("currency_code") @default("IRR") @db.Char(3)
  ratingAvg        Decimal          @map("rating_avg") @default(0.0) @db.Decimal(3, 2)
  ratingCount      Int              @map("rating_count") @default(0)
  isBestseller     Boolean          @map("is_bestseller") @default(false)
  isFeatured       Boolean          @map("is_featured") @default(false)
  isSpecialProduct Boolean          @map("is_special_product") @default(false)
  isActive         Boolean          @map("is_active") @default(true)
  heroImageUrl     String?          @map("hero_image_url") @db.Text
  internalNotes    String?          @map("internal_notes") @db.Text
  createdAt        DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  brand       Brand        @relation(fields: [brandId], references: [id], onDelete: Restrict)
  colorTheme  ColorTheme?  @relation(fields: [colorThemeId], references: [id], onDelete: SetNull)
  collection  Collection?  @relation(fields: [collectionId], references: [id], onDelete: SetNull)
  images      ProductImage[]
  variants    ProductVariant[]
  reviews     ProductReview[]

  relatedOut  RelatedProduct[] @relation("ProductRelations")
  relatedIn   RelatedProduct[] @relation("ProductRelationsInverse")
  cartItems   CartItem[]
  orderItems  OrderItem[]

  // many-to-many with Badge
  badges      Badge[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String   @map("product_id") @db.Uuid
  url       String   @db.Text
  alt       String?  @db.Text
  position  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, position])
  @@map("product_images")
}

model ProductVariant {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId    String   @map("product_id") @db.Uuid
  variantName  String   @map("variant_name") @db.Text
  sku          String?  @unique @db.Text
  price        Int?
  currencyCode String   @map("currency_code") @default("IRR") @db.Char(3)
  stock        Int      @default(0)
  colorName    String?  @map("color_name") @db.Text
  colorHexCode String?  @map("color_hex_code") @db.Char(7)
  isActive     Boolean  @map("is_active") @default(true)
  position     Int      @default(0)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  product    Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@unique([productId, variantName])
  @@map("product_variants")
}

model ProductReview {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String       @map("product_id") @db.Uuid
  userId    String?      @map("user_id") @db.Uuid
  rating    Int          @db.SmallInt
  title     String?      @db.Text
  body      String       @db.Text
  guestName String?      @map("guest_name") @db.Text
  status    ReviewStatus @default(PENDING)
  createdAt DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("product_reviews")
}

model Collection {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @db.Text

  products Product[]

  @@map("collections")
}

model Badge {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title String  @db.Text
  icon  String  @db.Text

  // many-to-many back to Product
  products Product[]

  @@map("badges")
}

model RelatedProduct {
  productId        String  @map("product_id") @db.Uuid
  relatedProductId String  @map("related_product_id") @db.Uuid
  position         Int     @default(0)

  product        Product @relation("ProductRelations", fields: [productId], references: [id], onDelete: Cascade)
  relatedProduct Product @relation("ProductRelationsInverse", fields: [relatedProductId], references: [id], onDelete: Cascade)

  @@id([productId, relatedProductId])
  @@map("related_products")
}

model Cart {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String?    @map("user_id") @db.Uuid
  anonymousId String?    @map("anonymous_id") @unique @db.Uuid
  status      CartStatus @default(ACTIVE)
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  user  User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cartId       String   @map("cart_id") @db.Uuid
  productId    String   @map("product_id") @db.Uuid
  variantId    String?  @map("variant_id") @db.Uuid
  title        String   @db.Text
  variantName  String?  @map("variant_name") @db.Text
  unitPrice    Int      @map("unit_price")
  quantity     Int
  lineTotal    Int      @map("line_total")
  currencyCode String   @map("currency_code") @default("IRR") @db.Char(3)
  imageUrl     String?  @map("image_url") @db.Text
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  cart    Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Restrict)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@map("cart_items")
}

model Order {
  id                   String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderNumber          String         @unique @map("order_number") @db.Text
  userId               String?        @map("user_id") @db.Uuid
  status               OrderStatus    @default(AWAITING_PAYMENT)
  shippingMethod       ShippingMethod @map("shipping_method") @default(STANDARD)
  paymentMethod        PaymentMethod  @map("payment_method") @default(GATEWAY)
  couponCode           String?        @map("coupon_code") @db.Text
  giftWrap             Boolean        @map("gift_wrap") @default(false)
  note                 String?        @db.Text
  subtotal             Int            @default(0)
  discountTotal        Int            @map("discount_total") @default(0)
  shippingTotal        Int            @map("shipping_total") @default(0)
  giftWrapTotal        Int            @map("gift_wrap_total") @default(0)
  total                Int            @default(0)
  currencyCode         String         @map("currency_code") @default("IRR") @db.Char(3)
  shippingFirstName    String         @map("shipping_first_name") @db.Text
  shippingLastName     String         @map("shipping_last_name") @db.Text
  shippingPhone        String         @map("shipping_phone") @db.Text
  shippingPostalCode   String?        @map("shipping_postal_code") @db.Text
  shippingProvince     String         @map("shipping_province") @db.Text
  shippingCity         String         @map("shipping_city") @db.Text
  shippingAddressLine1 String         @map("shipping_address_line1") @db.Text
  shippingAddressLine2 String?        @map("shipping_address_line2") @db.Text
  shippingCountry      String         @map("shipping_country") @default("IR") @db.Char(2)
  placedAt             DateTime       @default(now()) @map("placed_at") @db.Timestamptz
  createdAt            DateTime       @default(now()) @map("created_at") @db.Timestamptz
  updatedAt            DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  user        User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  items       OrderItem[]
  payments    Payment[]
  redemptions CouponRedemption[]

  @@map("orders")
}

model OrderItem {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId      String   @map("order_id") @db.Uuid
  productId    String?  @map("product_id") @db.Uuid
  variantId    String?  @map("variant_id") @db.Uuid
  title        String   @db.Text
  variantName  String?  @map("variant_name") @db.Text
  unitPrice    Int      @map("unit_price")
  quantity     Int
  lineTotal    Int      @map("line_total")
  currencyCode String   @map("currency_code") @default("IRR") @db.Char(3)
  imageUrl     String?  @map("image_url") @db.Text
  position     Int      @default(0)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product?        @relation(fields: [productId], references: [id], onDelete: SetNull)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@map("order_items")
}

model Payment {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId        String        @map("order_id") @db.Uuid
  method         PaymentMethod
  status         PaymentStatus @default(PENDING)
  amount         Int
  currencyCode   String        @map("currency_code") @default("IRR") @db.Char(3)
  authority      String?       @db.Text
  transactionRef String?       @map("transaction_ref") @db.Text
  paidAt         DateTime?     @map("paid_at") @db.Timestamptz
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Coupon {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code           String    @unique @db.Text
  type           CouponType
  percentValue   Int?      @map("percent_value")
  amountValue    Int?      @map("amount_value")
  minSubtotal    Int       @map("min_subtotal") @default(0)
  maxUses        Int?      @map("max_uses")
  maxUsesPerUser Int?      @map("max_uses_per_user")
  startsAt       DateTime? @map("starts_at") @db.Timestamptz
  endsAt         DateTime? @map("ends_at") @db.Timestamptz
  isActive       Boolean   @map("is_active") @default(true)
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  redemptions CouponRedemption[]

  @@map("coupons")
}

model CouponRedemption {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  couponId   String   @map("coupon_id") @db.Uuid
  userId     String?  @map("user_id") @db.Uuid
  orderId    String?  @map("order_id") @db.Uuid
  redeemedAt DateTime @default(now()) @map("redeemed_at") @db.Timestamptz

  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  order  Order? @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@unique([couponId, orderId])
  @@map("coupon_redemptions")
}

model UserAddress {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  label        String?  @db.Text
  firstName    String   @map("first_name") @db.Text
  lastName     String   @map("last_name") @db.Text
  phone        String   @db.Text
  postalCode   String?  @map("postal_code") @db.Text
  province     String   @db.Text
  city         String   @db.Text
  addressLine1 String   @map("address_line1") @db.Text
  addressLine2 String?  @map("address_line2") @db.Text
  country      String   @default("IR") @db.Char(2)
  isDefault    Boolean  @map("is_default") @default(false)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_addresses")
}

model NewsletterSubscription {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String    @unique @db.Citext
  source         String?   @db.Text
  consent        Boolean   @default(true)
  unsubscribedAt DateTime? @map("unsubscribed_at") @db.Timestamptz
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz

  @@map("newsletter_subscriptions")
}

model MagazineAuthor {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @db.Text
  slug      String?   @unique @db.Text
  bio       String?   @db.Text
  avatarUrl String?   @map("avatar_url") @db.Text
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  posts MagazinePost[]

  @@map("magazine_authors")
}

model MagazinePost {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authorId        String?          @map("author_id") @db.Uuid
  category        MagazineCategory
  title           String           @db.Text
  slug            String           @unique @db.Text
  excerpt         String?          @db.Text
  content         String           @db.Text
  heroImageUrl    String?          @map("hero_image_url") @db.Text
  readTimeMinutes Int?             @map("read_time_minutes")
  publishedAt     DateTime?        @map("published_at") @db.Timestamptz
  isPublished     Boolean          @map("is_published") @default(true)
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  author     MagazineAuthor?       @relation(fields: [authorId], references: [id], onDelete: SetNull)
  tags       MagazinePostTag[]
  relatedOut MagazineRelatedPost[] @relation("MagPostRelations")
  relatedIn  MagazineRelatedPost[] @relation("MagPostRelationsInverse")

  @@map("magazine_posts")
}

model MagazineTag {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique @db.Text
  slug String @unique @db.Text

  posts MagazinePostTag[]

  @@map("magazine_tags")
}

model MagazinePostTag {
  postId String @map("post_id") @db.Uuid
  tagId  String @map("tag_id")  @db.Uuid

  post MagazinePost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  MagazineTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("magazine_post_tags")
}

model MagazineRelatedPost {
  postId        String @map("post_id") @db.Uuid
  relatedPostId String @map("related_post_id") @db.Uuid

  post        MagazinePost @relation("MagPostRelations", fields: [postId], references: [id], onDelete: Cascade)
  relatedPost MagazinePost @relation("MagPostRelationsInverse", fields: [relatedPostId], references: [id], onDelete: Cascade)

  @@id([postId, relatedPostId])
  @@map("magazine_related_posts")
}

model SiteSetting {
  key         String   @id @db.Text
  value       Json     @db.JsonB
  description String?  @db.Text
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz

  @@map("site_settings")
}